import os
import stripe
from dotenv import load_dotenv
from stripe.error import StripeError

_ = load_dotenv()

class CustomerValidator:
    def __init__(self, customer_data):
        self.customer_data = customer_data

    def validate_customer_name(self):
        if not self.customer_data.get("name"):
            return print("Invalid customer data: missing name")
        
    def validate_customer_contact_info(self):
        if not self.customer_data.get("contact_info"):
            print("Invalid customer data: missing contact info")
            return
    

class PaymentValidator:
    def __init__(self, payment_data):
        self.payment_data = payment_data

    def validate_payment_source(self):
        if not self.payment_data.get("source"):
            return print("Invalid payment data")

class PaymentSender:
    stripe.api_key = os.getenv("STRIPE_API_KEY")

    def __init__(self, customer_data, payment_data):
        self.customer_data = customer_data
        self.payment_data = payment_data
        self.charge = None

    def send_payment(self):
        try:
            self.charge = stripe.Charge.create(
                amount=self.payment_data["amount"],
                currency="usd",
                source=self.payment_data["source"],
                description="Charge for " + self.customer_data["name"],
            )
            print("Payment successful")
            return self.charge
        except StripeError as e:
            print("Payment failed:", e)
            return

class EmailSender:
    def __init__(self, customer_data):
        self.customer_data=customer_data
    
    def send_email(self):
        if "email" in self.customer_data["contact_info"]:
                # import smtplib
                from email.mime.text import MIMEText
    
                msg = MIMEText("Thank you for your payment.")
                msg["Subject"] = "Payment Confirmation"
                msg["From"] = "no-reply@example.com"
                msg["To"] = self.customer_data["contact_info"]["email"]
    
                # server = smtplib.SMTP("localhost")
                # server.send_message(msg)
                # server.quit()
                print("Email sent to", self.customer_data["contact_info"]["email"])

class SMSSender:
    def __init__(self, customer_data):
        self.customer_data = customer_data

    def send_sms(self):
        if "phone" in self.customer_data["contact_info"]:
                phone_number = self.customer_data["contact_info"]["phone"]
                sms_gateway = "the custom SMS Gateway"
                print(
                    f"send the sms using {sms_gateway}: SMS sent to {phone_number}: Thank you for your payment."
                )

class LogsRecorder:
    def __init__(self, customer_data, payment_data, payment_sender):
        self.customer_data = customer_data
        self.payment_data = payment_data
        self.payment_sender = payment_sender

    def record_log(self):
        if not self.payment_sender.charge:
            print("Error: no se pudo registar el log por falla en la carga")
            return
    
        with open("transactions.log", "a") as log_file:
            log_file.write(f"{self.customer_data['name']} paid {self.payment_data['amount']}\n")
            log_file.write(f"Payment status: {self.payment_sender.charge['status']}\n")

class PaymentProcessor:
    def __init__(self, customer_data, payment_data):
        self.customer_data = customer_data
        self.payment_data = payment_data
    
    def process_transaction(self):
        customer_validator = CustomerValidator(self.customer_data)
        customer_validator.validate_customer_name()
        customer_validator.validate_customer_contact_info()
        payment_validator = PaymentValidator(self.payment_data)
        payment_validator.validate_payment_source()
        payment_sender = PaymentSender(self.customer_data, self.payment_data)
        payment_sender.send_payment()
        email_sender = EmailSender(self.customer_data)
        email_sender.send_email()
        sms_sender = SMSSender(self.customer_data)
        sms_sender.send_sms()
        logs_recorder = LogsRecorder(self.customer_data, self.payment_data, payment_sender)
        logs_recorder.record_log()

if __name__ == "__main__":

    customer_data_with_email = {
        "name": "John Doe",
        "contact_info": {"email": "e@mail.com"},
    }
    customer_data_with_phone = {
        "name": "Platzi Python",
        "contact_info": {"phone": "1234567890"},
    }

    payment_data = {"amount": 100, "source": "tok_mastercard", "cvv": 123}

    payment_processor = PaymentProcessor(customer_data_with_email, payment_data)
    payment_processor.process_transaction()
    # payment_processor.process_transaction(customer_data_with_phone, payment_data)
